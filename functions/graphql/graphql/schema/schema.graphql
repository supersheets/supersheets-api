# From TestSupersheetsApp (AWS AppSync Schema)
# https://console.aws.amazon.com/appsync/home?region=us-east-1#/kpvd6tf2jreobaoe2p7cu22vee/v1/schema

schema {
  query: Query
}

type Query {
  find(
    filter: LetterFilterInput,
    sort: LetterSortInput,
    skip: Int,
    limit: Int,
  ): Cursor
}

input LetterFilterInput {
  letter: StringQueryOperatorInput
  value: IntQueryOperatorInput
}

input LetterSortInput {
  fields: [LetterFieldsEnum] 
  order: [SortOrderEnum] = [ASC] 
}

# Based on letters.csv (Gatsby CSV example)
# https://docs.google.com/spreadsheets/d/1hCmRdgeWAnPEEzK-GHKdJDNjRZdhUHaKQKJ2IX7fTVI/edit#gid=0

type Letter implements Row {
  _id: ID!
  _sheet: String!
  _row: Int!
  letter: String!
  value: Int!
}

enum LetterFieldsEnum {
  _id
  _sheet
  _row
  letter
  value
}

# Gatsby does a more complex thing which is return a type of "Connection" so 
# that they can handle things like group bys and return fields like totalcount
type LetterResult {
  results: [Letter!]
}

# Generic Types which can apply to any Supersheet
# From https://711808k40x.sse.codesandbox.io/___graphql
# which is compatible with Sift 

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

enum SortOrderEnum {
  ASC
  DESC
}

interface Row {
  _id: ID!
  _sheet: String!
  _row: Int!
}


# input IntQueryOperatorInput {
#   eq: Date
#   ne: Date
#   gt: Date
#   gte: Date
#   lt: Date
#   lte: Date
#   in: [Date]
#   nin: [Date]
# }


# From https://www.gatsbyjs.org/docs/schema-input-gql/
"""
  {
  `MarkdownRemarkFrontmatterAuthor`: {
    name: `MarkdownRemarkFrontmatterAuthorInputObject`,
    fields: {
      `MarkdownRemarkFrontmatterAuthorName` : {
        name: `MarkdownRemarkFrontmatterAuthorNameQueryString`,
        fields: {
          eq: { type: GraphQLString },
          ne: { type: GraphQLString },
          regex: { type: GraphQLString },
          glob: { type: GraphQLString },
          in: { type: new GraphQLList(GraphQLString) },
        }
      }
    }
  }
}

{ //GraphQLInputObjectType
  name: `WordCountwordcountInputObject`,
  fields: {
    `paragraphs`: {
      type: { // GraphQLInputObjectType
        name: `WordCountParagraphsQueryInt`,
        fields: {
          eq: { type: GraphQLInt },
          ne: { type: GraphQLInt },
          gt: { type: GraphQLInt },
          gte: { type: GraphQLInt },
          lt: { type: GraphQLInt },
          lte: { type: GraphQLInt },
          in: { type: new GraphQLList(GraphQLInt) },
        }
      }
    }
  }
}
"""

# Taken from Gatsby's "Customizing the GraphQL Schema"
# https://www.gatsbyjs.org/docs/schema-customization/



"""
# Probably need to have internal types of Date and Datetime
# since Supersheets is opinionated about how date and datestime are stored (e.g. UTC)
type Internal {
  type: String!
}
"""




